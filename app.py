# -*- coding: utf-8 -*-
from reflection_agent_lang_graph import get_reflective_answer
import streamlit as st
from langchain_openai import ChatOpenAI
from langchain.schema import HumanMessage, AIMessage
from langchain.output_parsers import PydanticOutputParser
from langchain.prompts import ChatPromptTemplate
from pydantic import BaseModel, Field
import os
import json
import re
import uuid
import datetime
import logging
from websearchagent import search_with_agent
from config import (
    OPENAI_API_KEY, OPENAI_API_BASE, MODEL_NAME, 
    TEMPERATURE, PINECONE_API_KEY, INDEX_NAME
)
from db import (create_tables, save_message, get_chat_messages, archive_chat,
                get_chats, save_chat, update_chat_last_active, update_chat_name,
                archive_messages)
from retrieve import retrieve as retrieve_docs, is_relevant
from tfidf_retriever import get_tfidf_retriever
from sentence_transformers import SentenceTransformer
from routing import detect_topic_combined
from chat_manager import ChatManager
from gmail_langgraph import search_emails_for_info
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
create_tables()

class ChatResponse(BaseModel):
    content: str = Field(description="–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    sources: list = Field(description="–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞", default_factory=list)
    confidence: float = Field(description="–£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç 0 –¥–æ 1", ge=0, le=1)
    note: str = Field(description="–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ", default="")

st.title('Llama Chatbot')

if "chat_manager" not in st.session_state:
    st.session_state.chat_manager = ChatManager()

with st.sidebar:
    st.header("–ß–∞—Ç—ã")
    chat_options = st.session_state.chat_manager.get_all_chats()

    if chat_options:
        selected_chat = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç",
            options=list(chat_options.keys()),
            format_func=lambda x: f"{chat_options[x]['name']} ({chat_options[x]['created_at']})",
            index=list(chat_options.keys()).index(st.session_state.chat_manager.current_chat_id)
        )
        if selected_chat != st.session_state.chat_manager.current_chat_id:
            st.session_state.chat_manager.current_chat_id = selected_chat
            st.rerun()

    col1, col2, col3 = st.columns([0.9, 1, 1.1])
    with col1:
        if st.button("–ù–æ–≤—ã–π —á–∞—Ç"):
            st.session_state.chat_manager.create_chat()
            st.rerun()
    with col2:
        if st.button("–£–¥–∞–ª–∏—Ç—å —á–∞—Ç"):
            st.session_state.chat_manager.archive_chat(st.session_state.chat_manager.current_chat_id)
            st.rerun()
    with col3:
        if st.button("–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç"):
            st.session_state.chat_manager.clear_chat(st.session_state.chat_manager.current_chat_id)
            st.rerun()

    current_chat = st.session_state.chat_manager.get_chat_info(st.session_state.chat_manager.current_chat_id)
    new_chat_name = st.text_input(
        "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —á–∞—Ç",
        value=current_chat["name"] if current_chat else "–ù–æ–≤—ã–π —á–∞—Ç"
    )
    if current_chat and new_chat_name != current_chat["name"]:
        st.session_state.chat_manager.rename_chat(st.session_state.chat_manager.current_chat_id, new_chat_name)

    st.divider()
    st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API")
    api_key = st.text_input("API –∫–ª—é—á", value=OPENAI_API_KEY, type="password")
    api_base = st.text_input("API URL", value=OPENAI_API_BASE)
    model_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏", value=MODEL_NAME)
    temperature = st.slider("Temperature", min_value=0.0, max_value=2.0, value=TEMPERATURE, step=0.1)

    st.divider()
    st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Pinecone DB")
    pinecone_db_name = st.text_input("–ò–º—è Pinecone DB", value=INDEX_NAME)
    pinecone_api_key = st.text_input("Pinecone API –∫–ª—é—á", value=PINECONE_API_KEY, type="password")

api_changed = (
    "llm" not in st.session_state or
    st.session_state.get("api_key", "") != api_key or
    st.session_state.get("api_base", "") != api_base or
    st.session_state.get("model_name", "") != model_name or
    st.session_state.get("temperature", 0) != temperature
)
if api_changed:
    st.session_state.api_key = api_key
    st.session_state.api_base = api_base
    st.session_state.model_name = model_name
    st.session_state.temperature = temperature
    os.environ["OPENAI_API_KEY"] = api_key
    os.environ["OPENAI_API_BASE"] = api_base
    os.environ["MODEL_NAME"] = model_name
    os.environ["INDEX_NAME"] = pinecone_db_name
    os.environ["PINECONE_API_KEY"] = pinecone_api_key
    try:
        st.session_state.llm = ChatOpenAI(
            model_name=model_name,
            temperature=temperature,
            openai_api_key=api_key,
            openai_api_base=api_base
        )
        if "embedding_model" not in st.session_state:
            st.session_state.embedding_model = SentenceTransformer(
                "sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2"
            )
        st.sidebar.success("API –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        st.sidebar.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API: {str(e)}")

current_messages = st.session_state.chat_manager.get_chat_history(st.session_state.chat_manager.current_chat_id)

for message in current_messages:
    if isinstance(message, HumanMessage):
        with st.chat_message("user"):
            st.write(message.content)
    else:
        with st.chat_message("assistant"):
            if hasattr(message, 'structured_output') and message.structured_output:
                st.write(message.content)
                with st.expander("–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç"):
                    st.json(message.structured_output)
            else:
                st.write(message.content)

user_input = st.chat_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
if user_input:
    topic_docs = False
    greeting_patterns = [
        r'^\s*(–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π|–¥–æ–±—Ä—ã–π –¥–µ–Ω—å|–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ|–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä|—Ö–∞–π|—Ö–µ–π|–π–æ—É)\s*$',
        r'^\s*(hi|hello|hey|good morning|good afternoon|good evening)\s*$'
    ]
    email_dict = search_emails_for_info(user_input)
    web_dict = search_with_agent(user_input)
    web_dict_use = []
    web_refs = []
    for i in web_dict:
        if i[2] > 0.2:
            web_dict_use.append(i[0])
            web_refs.append(i[1])
    print(web_dict_use)
    if any(re.match(pattern, user_input.lower()) for pattern in greeting_patterns):
        st.session_state.chat_manager.add_message(
            st.session_state.chat_manager.current_chat_id, "user", user_input, temperature
        )
        with st.chat_message("user"):
            st.write(user_input)
        with st.chat_message("assistant"):
            greeting_response = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
            st.write(greeting_response)
            st.session_state.chat_manager.add_message(
                st.session_state.chat_manager.current_chat_id, "assistant", greeting_response, temperature
            )
        st.stop()

    with st.chat_message("user"):
        st.write(user_input)
        st.session_state.chat_manager.add_message(
            st.session_state.chat_manager.current_chat_id, "user", user_input, temperature
        )

    with st.spinner("–û–ø—Ä–µ–¥–µ–ª—è—é —Ç–µ–º—É..."):
        topic_result = detect_topic_combined(user_input)
        logger.info(f"–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–∞—è —Ç–µ–º–∞: {topic_result['topic_name']} (–∫–æ–¥ {topic_result['topic']}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {topic_result['confidence']:.2f})\n–ü—Ä–∏—á–∏–Ω–∞: {topic_result['reasoning']}")

    prev_topic_result = None
    for msg in reversed(current_messages):
        if isinstance(msg, HumanMessage):
            prev_topic_result = detect_topic_combined(msg.content)
            break

    if (
        topic_result["topic"] == 9 and
        prev_topic_result and
        prev_topic_result["topic"] in range(-2, 9) and
        topic_result["confidence"] < 0.75
    ):
        logger.info("–¢–µ–º–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ ‚Äî –Ω–∞—Å–ª–µ–¥—É–µ–º –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
        topic_result = prev_topic_result

    try:
        use_tfidf = topic_result["topic"] == -2
        if use_tfidf:
            translation_response = st.session_state.llm.invoke(f"–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π: {user_input}")
            final_query = translation_response.content
            logger.info(f"–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {final_query}")
        else:
            final_query = user_input

        query_text = f"{final_query}"
        logger.info(f"–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {query_text}")

        info_box = st.empty()
        info_box.info("üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")

        res = retrieve_docs(query_text=query_text, context="", topic_code=topic_result["topic"])

        info_box.empty()
        src = ""
        for match in res["matches"]:
            logger.info(f"[RAG MATCH] Score: {match['score']:.4f}")
            text = match["metadata"].get("chunk_text", "")
            logger.info(f"[RAG TEXT] ({len(text)} chars): {repr(text[:200])}")
            logger.info(f"[RAG METADATA] topic_name: {match['metadata']['topic_name']}, source: {match['metadata'].get('source_type', 'unknown')}")
            src = match["metadata"].get("source", "")
        if not is_relevant(res, use_tfidf):
            logger.info("–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≥–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ LLM")
            add = " "
            if email_dict["answer_bool"]:
                add = f"\n\n–¢–∞–∫–∂–µ —É—á—Ç–∏, —á—Ç–æ {email_dict['answer']}"
            if web_dict_use:
                web_str = " ".join(web_dict_use)
                add += f"\n\n–¢–∞–∫–∂–µ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, —á—Ç–æ {web_str}"

            #response = st.session_state.llm.invoke(user_input + add)
            response_str = get_reflective_answer(user_input+add)
            with st.chat_message("assistant"):
                st.write(response_str)
            st.session_state.chat_manager.add_message(
                st.session_state.chat_manager.current_chat_id, "assistant", response_str, temperature
            )
            print(email_dict)
            gmail_answer = ""
            if email_dict["answer_bool"]:
                answer = email_dict["answer"]
                sources = " ".join(email_dict["messages"])
                gmail_answer += "–£–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–æ—á—Ç–æ–≤–æ–º —è—â–∏–∫–µ. –í —Å–æ–æ–±—â–µ–Ω–∏—è—Ö (–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å - —Ç–µ–º–∞ - id):\n"
                k = 1
                for i in email_dict["messages"]:
                    gmail_answer += f"\n{k}) {i}"
                    k += 1

            if topic_docs:
                gmail_answer += f"\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞ –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö, –∞ –∏–º–µ–Ω–Ω–æ –≤ {src}"

            if web_dict_use:
                for (i,v) in enumerate(web_refs):
                    gmail_answer += f"\n\n{i}) –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, –∞ –∏–º–µ–Ω–Ω–æ –≤ {v}"
            if gmail_answer != "":
                st.info(gmail_answer)
                st.session_state.chat_manager.add_message(st.session_state.chat_manager.current_chat_id,
                                                          "assistant",
                                                          gmail_answer,
                                                          temperature)


            st.stop()
        topic_docs = True
        sources = [match["metadata"]["chunk_text"] for match in res["matches"][:40]]
        sources_text = "\n\n".join(sources)

        if topic_result["topic"] == -2:
            company_name = res["matches"][0]["metadata"].get("topic_name", "")
            prompt = f"""–¢—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫. –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –∫–æ–º–ø–∞–Ω–∏–∏ {company_name}, –∏—Å–ø–æ–ª—å–∑—É—è –¢–û–õ–¨–ö–û –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.
                    
                    
            –í–æ–ø—Ä–æ—Å: {user_input}
            
            –ò—Å—Ç–æ—á–Ω–∏–∫–∏:
            {sources_text}
            
            –î–∞–π –∫—Ä–∞—Ç–∫–∏–π –∏ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç, —É–∫–∞–∑—ã–≤–∞—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤."""
        else:
            prompt = f"""–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É—è –¢–û–õ–¨–ö–û –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∞—Ä—Ö–∏–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (RAG).

            –í–æ–ø—Ä–æ—Å: {user_input}
            
            –ö–æ–Ω—Ç–µ–∫—Å—Ç:
            {sources_text}
            
            –∏—Å–ø–æ–ª—å–∑—É—è –¢–û–õ–¨–ö–û –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∞—Ä—Ö–∏–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (RAG)."""
        if email_dict["answer_bool"]:
            prompt += f"\n\n–¢–∞–∫–∂–µ —É—á—Ç–∏, —á—Ç–æ {email_dict['answer']}"
        #response = st.session_state.llm.invoke(prompt)
        response_str = get_reflective_answer(prompt)
        with st.chat_message("assistant"):
            st.write(response_str)
        st.session_state.chat_manager.add_message(
            st.session_state.chat_manager.current_chat_id, "assistant", response_str, temperature
        )

        print(email_dict)
        gmail_answer = ""
        if email_dict["answer_bool"]:
            answer = email_dict["answer"]
            sources = " ".join(email_dict["messages"])
            gmail_answer += "–£–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–æ—á—Ç–æ–≤–æ–º —è—â–∏–∫–µ. –í —Å–æ–æ–±—â–µ–Ω–∏—è—Ö (–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å - —Ç–µ–º–∞ - id):\n"
            k = 1
            for i in email_dict["messages"]:
                gmail_answer += f"\n{k}) {i}"
                k+=1

        if topic_docs:
            gmail_answer += f"\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞ –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö, –∞ –∏–º–µ–Ω–Ω–æ –≤ {src}"

        if gmail_answer!="":
            st.info(gmail_answer)
            st.session_state.chat_manager.add_message(st.session_state.chat_manager.current_chat_id,
                                                      "assistant",
                                                      gmail_answer,
                                                      temperature)
        st.stop()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
        st.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        st.stop()

    st.stop()